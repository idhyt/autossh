#! /bin/bash
# set -ex

RELEASE_VERSION=${BUILD_VERSION:-0.1}

function set_version() {
    date=$(git show --pretty=format:"%ci %cr" | head -1 | cut -d " " -f1)
    commit=$(git rev-parse HEAD | cut -c1-10)
    RELEASE_VERSION="$RELEASE_VERSION ($commit $date)"
    sed -i "s|version = \".*\"|version = \"$RELEASE_VERSION\"|" ./src/main.rs
}

function build_target() {
    platform=$1
    name=$2
    rm -rf target/release/build && cross build --release --target $platform
    [ -d "./dist" ] || mkdir -p dist
    cp target/$platform/release/$name ./dist/$platform.$name
    cd ./dist && tar -czvf autossh.$platform.tar.gz $platform.$name && cd .. # && rm -rf $platform.$name
    echo "[+] $RELEASE_VERSION build success, output file: dist/autossh.$platform.tar.gz"
}

function build() {
    cross_info=$(
        cat <<EOF
1) x86_64-unknown-linux-musl
2) aarch64-unknown-linux-musl
3) x86_64-apple-darwin
4) aarch64-apple-darwin
5) x86_64-pc-windows-gnu
Select the target platform number:
EOF
    )
    name=autossh
    read -p "$cross_info" number
    case $number in
    1)
        platform=x86_64-unknown-linux-musl
        ;;
    2)
        platform=aarch64-unknown-linux-musl
        ;;
    3)
        platform=x86_64-apple-darwin
        ;;
    4)
        platform=aarch64-apple-darwin
        ;;
    5)
        platform=x86_64-pc-windows-gnu
        name=autossh.exe
        ;;
    *)
        platform=x86_64-unknown-linux-gnu
        ;;
    esac

    build_target $platform $name
}

function build_all() {
    [ -d "./dist" ] && rm -rf ./dist
    targets=(
        "x86_64-unknown-linux-musl"
        "aarch64-unknown-linux-musl"
        "x86_64-apple-darwin"
        "aarch64-apple-darwin"
        "x86_64-pc-windows-gnu"
    )
    for target in ${targets[@]}; do
        if [[ $target == "x86_64-pc-windows-gnu" ]]; then
            name=autossh.exe
        else
            name=autossh
        fi
        build_target $target $name
    done
}

set_version

case $1 in
"all")
    build_all
    ;;
*)
    build
    ;;
esac
