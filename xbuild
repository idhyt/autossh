#! /bin/bash
set -euxo pipefail

RELEASE_VERSION=${BUILD_VERSION:-0.1}
PKG_NAME=atsh

function build_target() {
    platform=$1
    name=$2
    if [[ "$platform" == *"x86_64-pc-windows"* ]]; then
        cross build --release --target $platform -vv
    else
        cross build --release --target $platform --features openssl -vv
    fi
    [ -d "./dist" ] || mkdir -p dist
    cp target/$platform/release/$name ./dist/$platform.$name
    cd ./dist && tar -czvf $PKG_NAME.$platform.tar.gz $platform.$name && cd .. # && rm -rf $platform.$name
    echo "[+] $RELEASE_VERSION build success, output file: dist/$PKG_NAME.$platform.tar.gz"
}

function build() {
    cross_info=$(
        cat <<EOF
1) x86_64-unknown-linux-musl
2) aarch64-unknown-linux-musl
3) x86_64-apple-darwin
4) aarch64-apple-darwin
5) x86_64-pc-windows-gnu
Select the target platform number:
EOF
    )
    name=$PKG_NAME
    read -p "$cross_info" number
    case $number in
    1)
        platform=x86_64-unknown-linux-musl
        ;;
    2)
        platform=aarch64-unknown-linux-musl
        ;;
    3)
        platform=x86_64-apple-darwin
        ;;
    4)
        platform=aarch64-apple-darwin
        ;;
    5)
        platform=x86_64-pc-windows-gnu
        name=$PKG_NAME.exe
        ;;
    *)
        platform=x86_64-unknown-linux-gnu
        ;;
    esac

    build_target $platform $name
}

function build_all() {
    [ -d "./dist" ] && rm -rf ./dist
    targets=(
        "x86_64-unknown-linux-musl"
        "aarch64-unknown-linux-musl"
        "x86_64-apple-darwin"
        "aarch64-apple-darwin"
        "x86_64-pc-windows-gnu"
    )
    for target in ${targets[@]}; do
        if [[ $target == "x86_64-pc-windows-gnu" ]]; then
            name=$PKG_NAME.exe
        else
            name=$PKG_NAME
        fi
        build_target $target $name
    done
}

# RUN in host test and build.rs
cargo build

case $1 in
"all")
    build_all
    ;;
*)
    build
    ;;
esac
